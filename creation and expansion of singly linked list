#include <stdio.h>
#include <stdlib.h>

//define struct for Nodes
typedef struct list
{
    int data;
    int key;
    struct list* next;
}Node;

//function declarations
Node* create(int a, int *counter);
void insert(int a, int *counter);
void delete_list();
void printlist();


//global pointers
Node* Head = NULL;
Node* Current = NULL;


int main()
{
    int *keycounter =(int*)malloc(sizeof(int));
    int value = 20;
    keycounter = 0;
    Head=create(value, keycounter);
    value = 30;
    insert(value, keycounter);
    value = 40;
    insert(value, keycounter);
    printlist();
    delete_list();

    free(keycounter);
    return 0;
}
// VV functions VV
void delete_list()
{
    free(Head);
    free(Current);
}

Node* create(int a, int *counter)
{
    Node* ptr=malloc(sizeof(Node));
    if(!ptr)
    {
        printf("ERROR-NOT ENOUGH MEMORY\n");
        free(ptr);
        return 0;
    }
        ptr->data=a;
        ptr->key=*counter;
        counter++;
        
        return ptr; 
    
}

void insert(int a, int *counter)
{
    Node* ptr=malloc(sizeof(Node));
    if(!ptr) {
        printf("ERROR-NOT ENOUGH MEMORY\n");
        free(ptr);
    }
    ptr->data=a;
    ptr->key=*counter;
    
    //point next field to old head
    ptr->next=Head;
    
    //assign current node as head of singly linked list
    Head=ptr;
    counter++;
}
  
//Thank you guys over at tutorialspoint for this neat idea for testing this.
//https://www.tutorialspoint.com/data_structures_algorithms/linked_list_program_in_c.htm
void printlist()
{
    Node* ptr=Head;
    printf("TESTING\n");
    while(ptr != NULL) {
        printf("%p*NODE* KEY:%i VALUE:%i PTR NEXT:%p\n \n", ptr, ptr->key, ptr->data, ptr->next);
        ptr=ptr->next;
    }
}
